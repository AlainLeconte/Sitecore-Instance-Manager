This document describes the way how to add your own functionality via pipelines.

There are two types of pipelines:
*	wizard pipelines = visual pipeline for collecting data via Wizard
*	pipelines = engine pipeline for processing collected data

Sample step-by-step scenario.

Subject: Add context menu item for deleting all instance's log files

Note: For more complicated sample please use existing in SIM functionality, this one is designed only for explaining the engine

Scenario:
1.	Open MainWindow.xaml file and find there <ContextMenu> element
2.	Add there your menu item <MenuItem Header="Delete logs" Click="DeleteLogs" /> definition
3.	Open MainWindow.xaml.cs file and add there DeleteLogs handler
    private void DeleteLogs(object sender, RoutedEventArgs e)
    {
      MainWindowHelper.DeleteLogs();
    }
4. 	Open the MainWindowHelper.cs file and add there the following method:
    public static void DeleteLogs()
    {
      if (SelectedInstance != null)
      {
        string dataFolderPath = SelectedInstance.DataFolderPath;
        FileSystem.Instance.AssertFolderExists(dataFolderPath, "The data folder ({0}) of the {1} instance doesn't exist".FormatWith(dataFolderPath, SelectedInstance.Name));
        var logs = Path.Combine(dataFolderPath, "logs");
        WizardPipelineManager.Start("deletelogs", new DeleteLogsArgs(SelectedInstance, logs));
      }
    }
5.	Create the DeleteLogs folder in the SIM.Pipelines project and create the DeleteLogsArgs class:
namespace SIM.Pipelines.DeleteLogs
{
  public class DeleteLogsArgs : ProcessorArgs
  {
		public readonly string Folder;
		public readonly Instance Instance;
		
		public BackupArgs(Instance instance, string folder)
    {
      Assert.ArgumentNotNull(instance, "instance");

      this.Instance = instance;
      this.Folder = folder;
    }
		
		// For replacing {InstanceName} macro in the Wizard title
		public string InstanceName
		{
			get
			{
				return this.Instance.Name;
			}
		}	   
  }
}
6.	Now we should modify the WizardPipelines.config file by adding the following element into the <wizardPipelines> section:
		<deletelogs title="Deleting the {InstanceName} instance's log files" startButton="Delete" finishText="The logs were successfully deleted">
      <steps>
        <step name="Information" type="SIM.Tool.Windows.UserControls.ConfirmStepUserControl, SIM.Tool.Windows" param="The log files of the selected Sitecore instance will be deleted." />
      </steps>
    </deletelogs>
		
		Here we reused simple ConfirmStepUserControl user control that just displays text.
7.	The same for the Pipelines.config file:
		<deletelogs title="Renaming the {InstanceName} instance">
      <processor type="SIM.Pipelines.DeleteLogs, SIM.Pipelines" title="Deleting log files" />
    </deletelogs>
		
		Note, you can put one processor into another to make them dependant. This means that if the parent processor failes to execute (some exception is thrown) the descendant processors don't run, but following siblings do.
8.	The last thing you need to do is to write the processor class:
namespace SIM.Pipelines.DeleteLogs
{
  public abstract class DeleteLogs : Processor
  {
    protected override void Process(ProcessorArgs args)
    {
      Assert.ArgumentNotNull(args, "args");

      var deleteLogArgs = (BackupArgs)args;
			var folder = deleteLogArgs.Folder;
			
			// Try using SIM API wherever is possible because it contains logging and is constantly being improved
			FileSystem.Instance.DeleteIfExists(logs);
			FileSystem.Instance.EnsureFolder(logs);
    }
  }
}